name: Deploy to Production

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: quizmaker-frontend/package-lock.json

      - name: Install deps
        working-directory: quizmaker-frontend
        run: npm ci

      - name: Build
        working-directory: quizmaker-frontend
        run: npm run build

      - name: Prepare deployment bundle
        run: |
          rm -rf deployment && mkdir -p deployment
          cp -r quizmaker-frontend/dist deployment/
          cp quizmaker-frontend/Dockerfile deployment/
          cp quizmaker-frontend/docker-compose.yml deployment/
          cp quizmaker-frontend/nginx.conf deployment/

      - name: Stop old app (ignore if first run)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            set -e
            mkdir -p /var/www/quizzence
            cd /var/www/quizzence
            docker compose down || true

      - name: Copy files
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            set -e
            cd /var/www/quizzence
            rm -rf *
            # Copy files from GitHub runner
            cat > docker-compose.yml << 'EOF'
            version: "3.8"
            
            services:
              quizzence-frontend:
                build:
                  context: .
                  dockerfile: Dockerfile
                ports:
                  - "127.0.0.1:3000:80"
                restart: unless-stopped
                healthcheck:
                  test: ["CMD", "curl", "-fsS", "http://localhost/"]
                  interval: 30s
                  timeout: 5s
                  retries: 3
                networks:
                  - quizzence-network
            
            networks:
              quizzence-network:
                driver: bridge
            EOF
            
            cat > Dockerfile << 'EOF'
            FROM nginx:alpine
            RUN apk add --no-cache curl
            COPY dist /usr/share/nginx/html
            COPY nginx.conf /etc/nginx/conf.d/default.conf
            EXPOSE 80
            CMD ["nginx", "-g", "daemon off;"]
            EOF
            
            cat > nginx.conf << 'EOF'
            server {
                listen 80;
                server_name quizzence.com www.quizzence.com;
                
                root /usr/share/nginx/html;
                index index.html;
                
                location / {
                    try_files $uri $uri/ /index.html;
                }
                
                location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
                    expires 1y;
                    add_header Cache-Control "public, immutable";
                }
                
                add_header X-Frame-Options "SAMEORIGIN" always;
                add_header X-Content-Type-Options "nosniff" always;
                add_header X-XSS-Protection "1; mode=block" always;
                add_header Referrer-Policy "strict-origin-when-cross-origin" always;
            }
            EOF

      - name: Copy built files
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            set -e
            cd /var/www/quizzence
            # Create dist directory
            mkdir -p dist
            # Remove any existing deployment folder
            rm -rf dist/deployment

      - name: Copy dist files
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            set -e
            cd /var/www/quizzence
            # Remove the nested deployment folder and move files up
            if [ -d "dist/deployment/dist" ]; then
              mv dist/deployment/dist/* dist/
              rmdir dist/deployment/dist
              rmdir dist/deployment
            fi
            # Ensure we have the built files
            ls -la dist/

      - name: Start app
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            set -e
            cd /var/www/quizzence
            # Prefer plugin form if installed
            if docker compose version >/dev/null 2>&1; then
              docker compose up -d --build
            else
              docker-compose up -d --build
            fi
